cpi_stats
help(fivenum)
summary(cpis)
first_quartile = cpi_stas[2]
first_quartile = cpi_stats[2]
third_quartile = cpi_stats[4]
irq = third_quartile - first_quartile
irq
lower_fence = first_quartile - 1.5 * irq
lower_fence
upper_fence - third_quartile + 1.5 * irq
upper_fence = third_quartile + 1.5 * irq
upper_fence
plot(years, cpis)
boxplot(cpis)
boxplot_values = boxplot(cpis)$out
boxplot_values
help("which")
which(cpis %in% boxplot_values)
summary(cpis)["1st Qu."]
summary(cpis)[["1st Qu."]]
summary(cpis)[["3rd Qu."]]
boxplot(cpis)
boxplot(cpis)$out
print boxplot(cpis)$out
print(boxplot(cpis)$out)
x = boxplot(cpis)
x$out
summary(x$out)
iqr(cpis)
IQR(cpis)
cpis[which(x<3)]
cpis[which(x<3.0)]
cpis[which(cpis<3.0)]
cpis[which(cpis<1.0)]
cpis[which(cpis<2.0)]
lower_fence
cpis[which(cpis<lower_fence)]
cpis[which(cpis<=lower_fence)]
cpis[which(cpis<=lower_fence)]
cpis[which(cpis>=higher_fence)]
cpis[which(cpis>=upper_fence)]
boxplot(cpis)
cpis
lower_fence
upper_fence
uf = (iqr * 1.5) + third_quartile
uf = (irq * 1.5) + third_quartile
uf
lf = first_quartile - (irq * 1.5)
lf
sys.getenv("path")
Sys.getenv("PATH")
dbinom(x = 1, size = 150000, 1/150000)
no_prize = dbinom(x = 150000 - 1031, size = 150000, 150000 - 1031 / 150000)
no_prize = dbinom(x = 150000 - 1031, size = 150000, (150000 - 1031) / 150000)
no_prize
150000 - 1031
tickets = 150000
sum((1/tickets)*tickets, (5/tickets)*tickets, (25/tickets)*tickets, (1000/tickets)*tickets)
sum((1/tickets)*50000, (5/tickets)*10000, (25/tickets)*1000, (1000/tickets)*10)
2^2
lottery_variance = sum((1/tickets)(50000 - ev)^2, (5/tickets)(10000 - ev)^2, (25/tickets)(1000 - ev)^2, (1000/tickets)(10 - ev)^2)
(1/tickets)(50000 - ev)^2
((1/tickets)(50000 - ev)^2)
ev
ev = sum((1/tickets)*50000, (5/tickets)*10000, (25/tickets)*1000, (1000/tickets)*10)
lottery_variance = sum((1/tickets)(50000 - ev)^2, (5/tickets)(10000 - ev)^2, (25/tickets)(1000 - ev)^2, (1000/tickets)(10 - ev)^2)
ev
((1/tickets)(50000 - ev)^2)
(1/tickets)(50000 - ev)^2
(1/tickets)*(50000 - ev)^2
lottery_variance = sum((1/tickets)*(50000 - ev)^2, (5/tickets)*(10000 - ev)^2, (25/tickets)*(1000 - ev)^2, (1000/tickets)*(10 - ev)^2)
lottery_variance
lottery_sd = sqrt(lottery_variance)
lottery_sd
grade_mean = 100
grade_sd = 10
grade_size = 30
grade_sample_mean = 92
grade_alpha = 0.05
grade_test_stat = (grade_sample_mean - grade_mean) / (grade_sd / sqrt(grade_size))
grade_critical_values = qt(1 - alpha / 2, df = grade_aize - 1)
grade_test_stat = (grade_sample_mean - grade_mean) / (grade_sd / sqrt(grade_size))
grade_critical_values = qt(1 - grade_alpha / 2, df = grade_aize - 1)
grade_test_stat = (grade_sample_mean - grade_mean) / (grade_sd / sqrt(grade_size))
grade_critical_values = qt(1 - grade_alpha / 2, df = grade_size - 1)
grade_test_stat
grade_critical_values
c(grade_critical_values, grade_critical_values)
c(-grade_critical_values, grade_critical_values)
qt(1 - grade_alpha, df = grade_aize - 1)
qt(1 - grade_alpha, df = grade_size - 1)
qt(1 - grade_alpha, df = 99)
qt(1 - 0.05, df = 99)
qt(1 - 0.05/2, df = 99)
qt((1 - 0.05)/2, df = 99)
qt(1 - 0.05/2, df = 99)
grade_critical_value = grade_critical_values
grade_critical_value
grade_test_stat
grade_critical_value = qt(1 - alpha, df = grade_aize - 1)
grade_critical_value = qt(1 - alpha, df = grade_size - 1)
grade_critical_value = qt(1 - 0.05, df = grade_size - 1)
grade_critical_value
grade_p_value = 2 * pt(grade_test_state, grade_size - 1, lower=FALSE)
grade_p_value = 2 * pt(grade_test_stat, grade_size - 1, lower=FALSE)
grade_p_value
pt(grade_test_stat, grade_size - 1, lower=FALSE)
pt(grade_test_stat, grade_size - 1, lower=FALSE) * 2
help(t.test)
grade_p_value = 2 * pt(-abs(grade_test_stat), grade_size - 1, lower=FALSE)
grade_p_value
grade_test_stat
help(prop.test)
sd = 40
alpha = 0.05
max_e = 10
z = qnorm(1 - alpha)
n = (z^2 * sd^2 * alpha / 2) / max_e^2
n
z
z^2
n = (z^2 * sd^2 * (alpha / 2) / max_e^2
n = (z^2 * sd^2 * (alpha / 2)) / max_e^2
n
z = qnorm(alpha / 2)
z
n = (z^2 * sd^2 * (alpha / 2)) / max_e^2
n
n = (z^2 * sd^2 / max_e^2
n = (z^2 * sd^2) / max_e^2
n
s = 40
alpha = 0.05
e = 10
z = qnorm(alpha / 2)
n = (z^2 * s^2) / e^2
e = 5
n = (z^2 * s^2) / e^2
n
245.8534 - 61.46334
m = 100
s = 10
n = 30
mbar = 92
alpha = 0.05
t = (mbar - m) / (s / sqrt(n))
t
qt(1 - alpha/2, df = n-1)
p = 2*pt(t, n -1)
p
p = 2*pt(t, n -1, lower=FALSE)
p
p = 2*pt(t, n -1)
p
2*pt(-abs(t), df = n-1)
.05/2
qnorm(.025)
-abs(qnorm(.025))
abs(qnorm(.025))
library(tidyverse)
library(splitstackshape)
setwd("C:/Users/Plata/Documents/Spring 2019/Project/UH_CPL_reproducing_research")
path <- "C:/Users/Plata/Documents/Spring 2019/Project/Materials"
nodes <- read.csv(paste(path,"/Faculty_GoogleScholar_Funding_Data_N4190.csv", sep=''), header = TRUE)
links <- read.csv(paste(path,"/GoogleScholar_paper_stats.csv", sep=''), header = FALSE)
## Transforming Data and building F-network (without pollinators)
colnames(links)<-c("google_id", "year", "citations", "coathor_codes")
colnames(nodes)[1]<-c("id")
colnames(links)[1]<-c("source")
colnames(links)[4]<-c("target")
# Remove non-Google IDs from link's target column
links = links %>%
mutate(target, target = strsplit(as.character(target), ",")) %>%
unnest(target) %>%
filter(!target %in% c(0, 1, 2))
# Remove self-referencing links (source <=> target)
links = links %>% filter(target != source)
# Add a new nodes column that indicates the first year that the faculty member became cross disciplinary (XD)
departments = nodes %>% select(id, dept)
colnames(departments) = c("source", "source_department")
links = links %>% inner_join(node_departments, by = "source")
colnames(departments) = c("target", "target_department")
links = links %>% inner_join(departments, by = "target")
links = mutate(links, XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
first_xd_years = links %>%
arrange(year) %>%
group_by(source) %>%
filter(XD == "XD") %>%
slice(1) %>%
ungroup() %>%
select(source, year)
colnames(first_xd_years) = c("id", "first_xd_year")
nodes = nodes %>% left_join(first_years, by = "id")
#TODO: still missing some nodes where XDIndicator = 'XD' (first_xd_year = NA)
# although there are no non-XDIndicator nodes!
write.csv(links, file = "Fig2a_Links.csv", row.names=F)
write.csv(nodes, file = "Fig2a_Nodes.csv", row.names=F)
library(tidyverse)
library(splitstackshape)
setwd("C:/Users/Plata/Documents/Spring 2019/Project/UH_CPL_reproducing_research")
path <- "C:/Users/Plata/Documents/Spring 2019/Project/Materials"
nodes <- read.csv(paste(path,"/Faculty_GoogleScholar_Funding_Data_N4190.csv", sep=''), header = TRUE)
links <- read.csv(paste(path,"/GoogleScholar_paper_stats.csv", sep=''), header = FALSE)
## Transforming Data and building F-network (without pollinators)
colnames(links)<-c("google_id", "year", "citations", "coathor_codes")
colnames(nodes)[1]<-c("id")
colnames(links)[1]<-c("source")
colnames(links)[4]<-c("target")
# Remove non-Google IDs from link's target column
links = links %>%
mutate(target, target = strsplit(as.character(target), ",")) %>%
unnest(target) %>%
filter(!target %in% c(0, 1, 2))
# Remove self-referencing links (source <=> target)
links = links %>% filter(target != source)
# Add a new nodes column that indicates the first year that the faculty member became cross disciplinary (XD)
departments = nodes %>% select(id, dept)
colnames(departments) = c("source", "source_department")
links = links %>% inner_join(departments, by = "source")
colnames(departments) = c("target", "target_department")
links = links %>% inner_join(departments, by = "target")
links = mutate(links, XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
first_xd_years = links %>%
arrange(year) %>%
group_by(source) %>%
filter(XD == "XD") %>%
slice(1) %>%
ungroup() %>%
select(source, year)
colnames(first_xd_years) = c("id", "first_xd_year")
nodes = nodes %>% left_join(first_years, by = "id")
#TODO: still missing some nodes where XDIndicator = 'XD' (first_xd_year = NA)
# although there are no non-XDIndicator nodes!
write.csv(links, file = "Fig2a_Links.csv", row.names=F)
write.csv(nodes, file = "Fig2a_Nodes.csv", row.names=F)
library(tidyverse)
library(splitstackshape)
setwd("C:/Users/Plata/Documents/Spring 2019/Project/UH_CPL_reproducing_research")
path <- "C:/Users/Plata/Documents/Spring 2019/Project/Materials"
nodes <- read.csv(paste(path,"/Faculty_GoogleScholar_Funding_Data_N4190.csv", sep=''), header = TRUE)
links <- read.csv(paste(path,"/GoogleScholar_paper_stats.csv", sep=''), header = FALSE)
## Transforming Data and building F-network (without pollinators)
colnames(links)<-c("google_id", "year", "citations", "coathor_codes")
colnames(nodes)[1]<-c("id")
colnames(links)[1]<-c("source")
colnames(links)[4]<-c("target")
# Remove non-Google IDs from link's target column
links = links %>%
mutate(target, target = strsplit(as.character(target), ",")) %>%
unnest(target) %>%
filter(!target %in% c(0, 1, 2))
# Remove self-referencing links (source <=> target)
links = links %>% filter(target != source)
# Add a new nodes column that indicates the first year that the faculty member became cross disciplinary (XD)
departments = nodes %>% select(id, dept)
colnames(departments) = c("source", "source_department")
links = links %>% inner_join(departments, by = "source")
colnames(departments) = c("target", "target_department")
links = links %>% inner_join(departments, by = "target")
links = mutate(links, XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
first_xd_years = links %>%
arrange(year) %>%
group_by(source) %>%
filter(XD == "XD") %>%
slice(1) %>%
ungroup() %>%
select(source, year)
colnames(first_xd_years) = c("id", "first_xd_year")
nodes = nodes %>% left_join(first_xd_years, by = "id")
#TODO: still missing some nodes where XDIndicator = 'XD' (first_xd_year = NA)
# although there are no non-XDIndicator nodes!
write.csv(links, file = "Fig2a_Links.csv", row.names=F)
write.csv(nodes, file = "Fig2a_Nodes.csv", row.names=F)
nodes
nodes %>% mutate(ifelse(first_xd_year >= 1990, "XD", as.character(dept)))
get_xd_department = function(first_xd_year, department, limit_year)
{
if (is.na(first_xd_year) | first_xd_year >= limit_year)
{
return("XD")
}
else
{
return(department)
}
}
nodes %>% mutate(get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
if (is.na(first_xd_year))
{
return("XD")
}
else if(first_xd_year >= limit_year)
{
return("XD")
}
else
{
return(department)
}
}
nodes %>% mutate(get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
if (is.na(first_xd_year))
{
return("XD")
}
#else if(first_xd_year >= limit_year)
#{
#  return("XD")
#}
else
{
return(department)
}
}
nodes %>% mutate(get_xd_department(first_xd_year, dept, 1990))
nodes %>% mutate(get_xd_department(first_xd_year, dept, 1990)) %>% group_by(dept)
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1990))
nodes %>% filter(is.na(first_xd_year))
nodes %>% filter(!is.na(first_xd_year))
nodes %>% filter(is.na(first_xd_year))
get_xd_department = function(first_xd_year, department, limit_year)
{
if (is.na(first_xd_year) | first_xd_year >= limit_year)
{
return("XD")
}
else return(department)
}
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
if (is.na(first_xd_year) || first_xd_year >= limit_year)
{
return("XD")
}
else return(department)
}
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
if (is.na(first_xd_year))
{
return("XD")
}
else if (first_xd_year >= limit_year)
{
return("XD")
}
else
{
return(department)
}
}
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1990))
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 2015))
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1922))
get_xd_department = function(first_xd_year, department, limit_year)
{
return(ifelse(is.na(first_xd_year) | first_xd_year >= limit_year, "XD", department))
}
get_xd_department(2008, "CS", 1990)
get_xd_department(2008, "CS", 3990)
get_xd_department(NA, "CS", 3990)
get_xd_department = function(first_xd_year, department, limit_year)
{
return(ifelse(!is.na(first_xd_year) & first_xd_year >= limit_year, "XD", department))
}
get_xd_department(NA, "CS", 3990)
get_xd_department(2009, "CS", 3990)
get_xd_department(2009, "CS", 1990)
get_xd_department = function(first_xd_year, department, limit_year)
{
return(ifelse(!is.na(first_xd_year) & first_xd_year <= limit_year, "XD", department))
}
get_xd_department(2009, "CS", 1990)
get_xd_department(2009, "CS", 1990)
get_xd_department(1990, "CS", 1990)
get_xd_department(1991, "CS", 1990)
get_xd_department(1991, "CS", 2005)
get_xd_department(2010, "CS", 2005)
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
return(ifelse(!is.na(first_xd_year) & first_xd_year <= limit_year, "XD", as.character(department)))
}
nodes %>% mutate(NEW = get_xd_department(first_xd_year, dept, 1990))
nodes %>% mutate(xd_as_of_year = get_xd_department(first_xd_year, dept, 1990))
nodes %>% mutate(xd_as_of_limit_year = get_xd_department(first_xd_year, dept, 1990))
nodes %>% mutate(xd_as_of_limit_year = get_xd_department(first_xd_year, dept, 2015))
nodes %>% mutate(xd_as_of_limit_year = get_xd_department(first_xd_year, dept, 2020))
figure1 = nodes %>% mutate(xd_as_of_limit_year = get_xd_department(first_xd_year, dept, 1990))
figure2a_nodes = nodes %>% mutate(xd_as_of_limit_year = get_xd_department(first_xd_year, dept, 1990))
View(figure2a_nodes)
filter(figure2a_nodes, xd_as_of_limit_year == "XD")
tally(filter(figure2a_nodes, xd_as_of_limit_year == "XD"))
tally(nodes %>% mutate(xd_as_of_limit_year = get_xd_department(first_xd_year, dept, 1990)))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 1990)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2000)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2005)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2010)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2015)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2020)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 1985)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 1980)) %>% filter(limited_xd == "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 1980)) %>% filter(limited_xd != "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2015'')) %>% filter(limited_xd != "XD"))
tally(nodes %>% mutate(limited_xd = get_xd_department(first_xd_year, dept, 2015)) %>% filter(limited_xd != "XD"))
nodes %>% mutate(limit_xd = get_xd_department(first_xd_year, dept, 1990))
figure2a_nodes = nodes %>% mutate(limit_xd = get_xd_department(first_xd_year, dept, 1990))
library(tidyverse)
library(splitstackshape)
setwd("C:/Users/Plata/Documents/Spring 2019/Project/UH_CPL_reproducing_research")
path <- "C:/Users/Plata/Documents/Spring 2019/Project/Materials"
nodes <- read.csv(paste(path,"/Faculty_GoogleScholar_Funding_Data_N4190.csv", sep=''), header = TRUE)
links <- read.csv(paste(path,"/GoogleScholar_paper_stats.csv", sep=''), header = FALSE)
## Transforming Data and building F-network (without pollinators)
colnames(links)<-c("google_id", "year", "citations", "coathor_codes")
colnames(nodes)[1]<-c("id")
colnames(links)[1]<-c("source")
colnames(links)[4]<-c("target")
# Remove non-Google IDs from link's target column
links = links %>%
mutate(target, target = strsplit(as.character(target), ",")) %>%
unnest(target) %>%
filter(!target %in% c(0, 1, 2))
# Remove self-referencing links (source <=> target)
links = links %>% filter(target != source)
tally(links)
departments = nodes %>% select(id, dept)
tally(departments)
colnames(departments) = c("source", "source_department")
links %>% inner_join(departments, by = "source")
tally(links %>% inner_join(departments, by = "source"))
links = links %>% inner_join(departments, by = "source")
links
colnames(departments) = c("target", "target_department")
departments
tally(links %>% inner_join(departments, by = "target"))
departments
target
links%target
links
links$target
tally(links %>% inner_join(departments, by = "target"))
colnames(departments) = c("source", "source_department")
links %>% inner_join(departments, by = "source")
tally(links)
links = links %>% inner_join(departments, by = "target")
colnames(departments) = c("target", "target_department")
links = links %>% inner_join(departments, by = "target")
tally(target)
tally(links)
links
links %>% mutate(XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
tally(links %>% mutate(XD = ifelse(source_department != target_department, "XD", as.character(source_department))))
links %>%
arrange(year) %>%
group_by(source) %>%
filter(XD == "XD") %>%
slice(1) %>%
ungroup() %>%
select(source, year)
links = links %>% mutate(XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
links %>% mutate(XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
links
links %>%
arrange(year) %>%
group_by(source) %>%
filter(XD == "XD") %>%
slice(1) %>%
ungroup() %>%
select(source, year)
links %>% arrange(year)
links %>% arrange(year) %>%
links %>%
arrange(year) %>%
group_by(source, target)
group_by(source)
links %>%
arrange(year) %>%
group_by(source)
links %>% arrange(year) %>% group_by(source)
links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD")
links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD") %>% slice(1)
links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD") %>% slice(1) %>% ungroup()
links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD") %>% slice(1) %>% select(source, year)
first_xd_years = links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD") %>% slice(1) %>% select(source, year)
summary(first_xd_years)
first_xd_years %>% arrange(year)
colnames(first_xd_years) = c("id", "first_xd_year")
nodes %>% left_join(first_xd_years, by = "id")
nodes %>% outer_join(first_xd_years, by = "id")
nodes %>% right_join(first_xd_years, by = "id")
tally(nodes %>% right_join(first_xd_years, by = "id"))
tally(nodes %>% left_join(first_xd_years, by = "id"))
nodes %>% left_join(first_xd_years, by = "id")
nodes %>% mutate(limit_xd = get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
return(ifelse(!is.na(first_xd_year) & first_xd_year <= limit_year, "XD", as.character(department)))
}
nodes %>% mutate(limit_xd = get_xd_department(first_xd_year, dept, 1990))
nodes = nodes %>% left_join(first_xd_years, by = "id")
nodes %>% mutate(limit_xd = get_xd_department(first_xd_year, dept, 1990))
first_xd_years = links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD")
links %>% arrange(year) %>% group_by(source) %>% filter(XD == "XD")
