library(shiny)
runExample('02_hello')
runExample('02_text')
c?
?c
?
install.packages('ggplot2')
help(getwd)
getwd
getwd()
typeof('hello')
class('hello')
class(2.5)
class(false)
class(False)
class(1)
class('heel')
as.array(x = 1,2,1)
x
as.array(x => 1,2,1)
as.array(x -> 1,2,1)
as.array(x <- 1,2,1)
x
1 < 1
1 = 1
comparision <- 1 = 1
1 < 2
comparison = 1 < 2
compareVersion()
comparison
print(comparison)
print(class(comparison)
)
clear
class(TRUE)
paste("HEY", "YOU", sep = '\n')
paste("HEY", "YOU", sep = "\n")
paste(1,2,3,4,5, collapse = TRUE)
paste(1,2,3,4,5, collapse = '...')
paste(1,2,3,4,5, collapse = '...', sep = ', ')
paste(1,2,3,4,5, collapse = '...', sep = ', ')
help(paste)
matrix = matrix(c(1:20), nrow = 4, ncol = 6)
matrix = matrix(c(1:20), nrow = 4, ncol = 5)
print(matrix)
data = c(1:20)
print(data)
matrix[0]
matrix[0][0]
print(matrix[0])
matrix[2]
matrix[1]
help(cbind)
patients = c(1, 2, 3, 4)
cbind(patients, matrix)
patients = c('One', 'two', 'three', 'four')
cbind(patients, matrix)
dataframe = dataframe(patients, matrix)
dataframe = data.frame(patients, matrix)
dataframe
values = c(a, b,c ,d,e,f)
values = c('a', 'b', 'c', 'd', 'e', 'f')
colnames(dataframe) = values
dataframe
dataframe
values
View(dataframe)
View(matrix)
View(matrix)
View(dataframe)
View(matrix)
View
help(View)
view(matrix)
View(matrix)
exit
close
close()
close(this)
str(dataframe)
summary(dataframe)
help(summary)
list = c(1:15)
list
boxplot(list, xlab='X', ylab='Y')
plot =boxplot(list, xlab='X', ylab='Y')
summary(plot)
plot
plot
summary(plot)
mean(plot)
View(plot)
plot(cars)
plot(cars)
Sys.getenv("R_ENVIRON")
Sys.getenv("R_HOME")
Sys.getenv("HOME")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("R_ENVIRON")
Sys.getenv("R_HOME")
Sys.getenv("R_ENVIRON")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.which("pdflatex")
pdflates
pdflatex
clear
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.getenv("PATH")
cpis = c(3.0, 2.6, 2.8, 3.0, 2.3, 1.6, 2.2, 3.4, 2.8, 1.6, 2.3, 2.7, 3.4, 3.2, 2.8)
cpis
summary(cpis)
std(cpis)
sd(cpis)
help(sd)
mean(cpis)
median(cpis)
seq(as.Date("1993"), by = "year", length.out = 20)
seq(as.integer(1993), by = "year", length.out = 20)
seq(as.integer(1993), length.out = 20)
seq(as.integer(1993), length.out = 11)
epmc_hits_trend
plot(years, cpis)
years = seq(as.integer(1993), length.out = 11)
plot(years, cpis)
years = c(1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007)
plot(years, cpis)
help(abline)
help(lines)
help(lm)
lines(lm(cpis~years))
ablines(lm(cpis~years))
abline(lm(cpis~years))
help("predict")
lines(lm(cpis~years))
lines(lm(cpis~years), col = "red")
abline(lm(cpis~years))
plot(years, cpis, xlab = "Year", ylab = "CPI")
abline(lm(cpis~years))
abline(lm(years~cpis))
plot(years, cpis, xlab = "Year", ylab = "CPI")
abline(lm(years~cpis))
abline(lm(cpis~years))
help(lm)
summary(cpis)
iqr(cpis)
help(fnum)
??fnum
fivenum(cpis)
summary = fivenum(cpis)
summary
print(summary)
cpi_stats = fivenum(cpis)
cpi_stats
help(fivenum)
summary(cpis)
first_quartile = cpi_stas[2]
first_quartile = cpi_stats[2]
third_quartile = cpi_stats[4]
irq = third_quartile - first_quartile
irq
lower_fence = first_quartile - 1.5 * irq
lower_fence
upper_fence - third_quartile + 1.5 * irq
upper_fence = third_quartile + 1.5 * irq
upper_fence
plot(years, cpis)
boxplot(cpis)
boxplot_values = boxplot(cpis)$out
boxplot_values
help("which")
which(cpis %in% boxplot_values)
summary(cpis)["1st Qu."]
summary(cpis)[["1st Qu."]]
summary(cpis)[["3rd Qu."]]
boxplot(cpis)
boxplot(cpis)$out
print boxplot(cpis)$out
print(boxplot(cpis)$out)
x = boxplot(cpis)
x$out
summary(x$out)
iqr(cpis)
IQR(cpis)
cpis[which(x<3)]
cpis[which(x<3.0)]
cpis[which(cpis<3.0)]
cpis[which(cpis<1.0)]
cpis[which(cpis<2.0)]
lower_fence
cpis[which(cpis<lower_fence)]
cpis[which(cpis<=lower_fence)]
cpis[which(cpis<=lower_fence)]
cpis[which(cpis>=higher_fence)]
cpis[which(cpis>=upper_fence)]
boxplot(cpis)
cpis
lower_fence
upper_fence
uf = (iqr * 1.5) + third_quartile
uf = (irq * 1.5) + third_quartile
uf
lf = first_quartile - (irq * 1.5)
lf
sys.getenv("path")
Sys.getenv("PATH")
dbinom(x = 1, size = 150000, 1/150000)
no_prize = dbinom(x = 150000 - 1031, size = 150000, 150000 - 1031 / 150000)
no_prize = dbinom(x = 150000 - 1031, size = 150000, (150000 - 1031) / 150000)
no_prize
150000 - 1031
tickets = 150000
sum((1/tickets)*tickets, (5/tickets)*tickets, (25/tickets)*tickets, (1000/tickets)*tickets)
sum((1/tickets)*50000, (5/tickets)*10000, (25/tickets)*1000, (1000/tickets)*10)
2^2
lottery_variance = sum((1/tickets)(50000 - ev)^2, (5/tickets)(10000 - ev)^2, (25/tickets)(1000 - ev)^2, (1000/tickets)(10 - ev)^2)
(1/tickets)(50000 - ev)^2
((1/tickets)(50000 - ev)^2)
ev
ev = sum((1/tickets)*50000, (5/tickets)*10000, (25/tickets)*1000, (1000/tickets)*10)
lottery_variance = sum((1/tickets)(50000 - ev)^2, (5/tickets)(10000 - ev)^2, (25/tickets)(1000 - ev)^2, (1000/tickets)(10 - ev)^2)
ev
((1/tickets)(50000 - ev)^2)
(1/tickets)(50000 - ev)^2
(1/tickets)*(50000 - ev)^2
lottery_variance = sum((1/tickets)*(50000 - ev)^2, (5/tickets)*(10000 - ev)^2, (25/tickets)*(1000 - ev)^2, (1000/tickets)*(10 - ev)^2)
lottery_variance
lottery_sd = sqrt(lottery_variance)
lottery_sd
grade_mean = 100
grade_sd = 10
grade_size = 30
grade_sample_mean = 92
grade_alpha = 0.05
grade_test_stat = (grade_sample_mean - grade_mean) / (grade_sd / sqrt(grade_size))
grade_critical_values = qt(1 - alpha / 2, df = grade_aize - 1)
grade_test_stat = (grade_sample_mean - grade_mean) / (grade_sd / sqrt(grade_size))
grade_critical_values = qt(1 - grade_alpha / 2, df = grade_aize - 1)
grade_test_stat = (grade_sample_mean - grade_mean) / (grade_sd / sqrt(grade_size))
grade_critical_values = qt(1 - grade_alpha / 2, df = grade_size - 1)
grade_test_stat
grade_critical_values
c(grade_critical_values, grade_critical_values)
c(-grade_critical_values, grade_critical_values)
qt(1 - grade_alpha, df = grade_aize - 1)
qt(1 - grade_alpha, df = grade_size - 1)
qt(1 - grade_alpha, df = 99)
qt(1 - 0.05, df = 99)
qt(1 - 0.05/2, df = 99)
qt((1 - 0.05)/2, df = 99)
qt(1 - 0.05/2, df = 99)
grade_critical_value = grade_critical_values
grade_critical_value
grade_test_stat
grade_critical_value = qt(1 - alpha, df = grade_aize - 1)
grade_critical_value = qt(1 - alpha, df = grade_size - 1)
grade_critical_value = qt(1 - 0.05, df = grade_size - 1)
grade_critical_value
grade_p_value = 2 * pt(grade_test_state, grade_size - 1, lower=FALSE)
grade_p_value = 2 * pt(grade_test_stat, grade_size - 1, lower=FALSE)
grade_p_value
pt(grade_test_stat, grade_size - 1, lower=FALSE)
pt(grade_test_stat, grade_size - 1, lower=FALSE) * 2
help(t.test)
grade_p_value = 2 * pt(-abs(grade_test_stat), grade_size - 1, lower=FALSE)
grade_p_value
grade_test_stat
help(prop.test)
sd = 40
alpha = 0.05
max_e = 10
z = qnorm(1 - alpha)
n = (z^2 * sd^2 * alpha / 2) / max_e^2
n
z
z^2
n = (z^2 * sd^2 * (alpha / 2) / max_e^2
n = (z^2 * sd^2 * (alpha / 2)) / max_e^2
n
z = qnorm(alpha / 2)
z
n = (z^2 * sd^2 * (alpha / 2)) / max_e^2
n
n = (z^2 * sd^2 / max_e^2
n = (z^2 * sd^2) / max_e^2
n
s = 40
alpha = 0.05
e = 10
z = qnorm(alpha / 2)
n = (z^2 * s^2) / e^2
e = 5
n = (z^2 * s^2) / e^2
n
245.8534 - 61.46334
m = 100
s = 10
n = 30
mbar = 92
alpha = 0.05
t = (mbar - m) / (s / sqrt(n))
t
qt(1 - alpha/2, df = n-1)
p = 2*pt(t, n -1)
p
p = 2*pt(t, n -1, lower=FALSE)
p
p = 2*pt(t, n -1)
p
2*pt(-abs(t), df = n-1)
.05/2
qnorm(.025)
-abs(qnorm(.025))
abs(qnorm(.025))
library(tidyverse)
library(splitstackshape)
setwd("C:/Users/Plata/Documents/Spring 2019/Project/UH_CPL_reproducing_research")
path <- "C:/Users/Plata/Documents/Spring 2019/Project/Materials"
nodes <- read.csv(paste(path,"/Faculty_GoogleScholar_Funding_Data_N4190.csv", sep=''), header = TRUE)
links <- read.csv(paste(path,"/GoogleScholar_paper_stats.csv", sep=''), header = FALSE)
## Transforming Data and building F-network (without pollinators)
colnames(links)<-c("google_id", "year", "citations", "coathor_codes")
colnames(nodes)[1]<-c("id")
colnames(links)[1]<-c("source")
colnames(links)[4]<-c("target")
# Remove non-Google IDs from link's target column
links = links %>%
mutate(target, target = strsplit(as.character(target), ",")) %>%
unnest(target) %>%
filter(!target %in% c(0, 1, 2))
# Remove self-referencing links (source <=> target)
links = links %>% filter(target != source)
# Add a new nodes column that indicates the first year that the faculty member became cross disciplinary (XD)
departments = nodes %>% select(id, dept)
colnames(departments) = c("source", "source_department")
links = links %>% inner_join(departments, by = "source")
colnames(departments) = c("target", "target_department")
links = links %>% inner_join(departments, by = "target")
links = links %>% mutate(XD = ifelse(source_department != target_department, "XD", as.character(source_department)))
first_xd_years = links %>%
arrange(year) %>%
group_by(source) %>%
filter(XD == "XD") %>%
slice(1) %>%
ungroup() %>%
select(source, year)
colnames(first_xd_years) = c("id", "first_xd_year")
nodes = nodes %>% left_join(first_xd_years, by = "id")
View(first_xd_years)
View(nodes)
nodes %>% filter(first_xd_year == NA)
nodes %>% mutate(xd_dept = get_xd_department(first_xd_year, dept, 1990))
get_xd_department = function(first_xd_year, department, limit_year)
{
return(ifelse(!is.na(first_xd_year) & first_xd_year <= limit_year, "XD", as.character(department)))
}
nodes %>% mutate(xd_dept = get_xd_department(first_xd_year, dept, 1990))
nodes %>% mutate(degree = log1p(degree))
